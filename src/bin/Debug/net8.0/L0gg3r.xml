<?xml version="1.0"?>
<doc>
    <assembly>
        <name>L0gg3r</name>
    </assembly>
    <members>
        <member name="T:L0gg3r.BuilderBase`2">
            <summary>
            An abstract base class for a builder.
            </summary>
            <typeparam name="TTarget">The <see cref="T:System.Type"/> of the target that this builder shall build.</typeparam>
            <typeparam name="TBuilder">The <see cref="T:System.Type"/> of the builder itself.</typeparam>
        </member>
        <member name="M:L0gg3r.BuilderBase`2.WithModification(System.Action{`0})">
            <summary>
            Adds a modification to the builder.
            </summary>
            <remarks>
            A modification is an action that modifies the target object.
            </remarks>
            <param name="modification">The modification to add.</param>
            <returns>This <see cref="T:L0gg3r.BuilderBase`2"/> instance.</returns>
        </member>
        <member name="M:L0gg3r.BuilderBase`2.Build">
            <summary>
            Creates and returns a new instance of <typeparamref name="TTarget"/>.
            </summary>
            <returns>The newly created <typeparamref name="TTarget"/>.</returns>
        </member>
        <member name="T:L0gg3r.LoggerBuilder">
            <summary>
            A builder for creating <see cref="T:L0gg3r.Logger"/> instances.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:L0gg3r.LoggerBuilder"/> class.
            </remarks>
        </member>
        <member name="M:L0gg3r.LoggerBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LoggerBuilder"/> class.
            </summary>
        </member>
        <member name="M:L0gg3r.LoggerBuilder.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LoggerBuilder"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:L0gg3r.Logger"/>.</param>
        </member>
        <member name="P:L0gg3r.LoggerBuilder.LogTo">
            <summary>
            Gets a <see cref="P:L0gg3r.LoggerBuilder.LogTo"/>.
            </summary>
        </member>
        <member name="P:L0gg3r.LoggerBuilder.LogSinks">
            <summary>
            Gets the collection of <see cref="T:L0gg3r.ILogSink"/>s.
            </summary>
        </member>
        <member name="P:L0gg3r.LoggerBuilder.AsyncLogSinks">
            <summary>
            Gets the collection of <see cref="T:L0gg3r.ILogSink"/>s.
            </summary>
        </member>
        <member name="M:L0gg3r.LoggerBuilder.WithName(System.String)">
            <summary>
            Creates a <see cref="T:L0gg3r.Logger"/> with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:L0gg3r.Logger"/>.</param>
            <returns>The <see cref="T:L0gg3r.LoggerBuilder"/> instance.</returns>
        </member>
        <member name="M:L0gg3r.LoggerBuilder.WithMinimumLogLevel(L0gg3r.LogLevel)">
            <summary>
            Creates a <see cref="T:L0gg3r.Logger"/> with the specified <paramref name="minimumLogLevel"/>.
            </summary>
            <param name="minimumLogLevel">The minium <see cref="T:L0gg3r.LogLevel"/>.</param>
            <returns>This <see cref="T:L0gg3r.LoggerBuilder"/> instance.</returns>
        </member>
        <member name="M:L0gg3r.LoggerBuilder.WithFilter(System.Predicate{L0gg3r.LogMessage})">
            <summary>
            Creates a <see cref="T:L0gg3r.Logger"/> with the specified <paramref name="filter"/>.
            </summary>
            <param name="filter">The filter.</param>
            <returns>This <see cref="T:L0gg3r.LoggerBuilder"/> instance.</returns>
        </member>
        <member name="M:L0gg3r.LoggerBuilder.WithChildLogger(System.String)">
            <summary>
            Creates a <see cref="T:L0gg3r.Logger"/> with a child logger named <paramref name="childLoggerName"/>.
            </summary>
            <param name="childLoggerName">The name of the child logger.</param>
            <returns>This <see cref="T:L0gg3r.LoggerBuilder"/> instance.</returns>
        </member>
        <member name="M:L0gg3r.LoggerBuilder.WithChildLogger(System.String,System.Action{L0gg3r.LoggerBuilder})">
            <summary>
            Creates a <see cref="T:L0gg3r.Logger"/> with a child logger named <paramref name="childLoggerName"/>.
            </summary>
            <param name="childLoggerName">The name of the child logger.</param>
            <param name="childLoggerBuilderAction">An action providing access to the <see cref="T:L0gg3r.LoggerBuilder"/> of the child logger.</param>
            <returns>This <see cref="T:L0gg3r.LoggerBuilder"/> instance.</returns>
        </member>
        <member name="T:L0gg3r.LogSinkBuilder`2">
            <summary>
            A builder for creating <see cref="T:L0gg3r.ILogSink"/> instances.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:L0gg3r.LogSinkBuilder`2"/> class.
            </remarks>
            <typeparam name="TLogSink">The <see cref="T:System.Type"/> of the log sink.</typeparam>
            <typeparam name="TBuilder">The <see cref="T:System.Type"/> of the builder.</typeparam>
        </member>
        <member name="M:L0gg3r.LogSinkBuilder`2.WithLogMessageWriter``1">
            <summary>
            Registers a log message writer of type <typeparamref name="TLogMessageWriter"/>.
            </summary>
            <remarks>
            This method is useful to register a single log message writer.
            </remarks>
            <typeparam name="TLogMessageWriter">The <see cref="T:System.Type"/> of the log message writer.</typeparam>
            <returns>This <see cref="T:L0gg3r.LogSinkBuilder`2"/>.</returns>
            <seealso cref="M:L0gg3r.LogSinkBuilder`2.WithLogMessageWriter(System.Type)"/>
        </member>
        <member name="M:L0gg3r.LogSinkBuilder`2.WithLogMessageWriter(System.Type)">
            <summary>
            Registers a log message writer of type <paramref name="logMessageWriterType"/>.
            </summary>
            <remarks>
            This method is useful to register a single log message writer.
            </remarks>
            <param name="logMessageWriterType">The <see cref="T:System.Type"/> of the log message writer.</param>
            <returns>This <see cref="T:L0gg3r.LogSinkBuilder`2"/>.</returns>
            <seealso cref="M:L0gg3r.LogSinkBuilder`2.WithLogMessageWriter``1"/>
        </member>
        <member name="M:L0gg3r.LogSinkBuilder`2.WithLogMessageWritersFrom(System.Reflection.Assembly[])">
            <summary>
            Registers all log message writers in the specified <paramref name="assemblies"/>.
            </summary>
            <remarks>
            This method is useful when all log message writers from different <paramref name="assemblies"/>.
            </remarks>
            <param name="assemblies">The list of <see cref="T:System.Reflection.Assembly"/>.</param>
            <returns>This <see cref="T:L0gg3r.LogSinkBuilder`2"/>.</returns>
        </member>
        <member name="M:L0gg3r.LogSinkBuilder`2.WithLogMessageWritersFromAllAssemblies">
            <summary>
            Registers all log message writers in the current <see cref="T:System.AppDomain"/>.
            </summary>
            <remarks>
            This method is useful when all log message writers in the whole <see cref="T:System.AppDomain"/> should
            be registered.
            </remarks>
            <returns>This <see cref="T:L0gg3r.LogSinkBuilder`2"/>.</returns>
            <seealso cref="P:System.AppDomain.CurrentDomain"/>
        </member>
        <member name="M:L0gg3r.LogSinkBuilder`2.WithLogMessageWritersFromCallingAssembly">
            <summary>
            Registers all log message writers from the calling <see cref="T:System.Reflection.Assembly"/>.
            </summary>
            <remarks>
            This method is useful when the log message writers are in the same assembly as the
            calling code.
            </remarks>
            <returns>This <see cref="T:L0gg3r.LogSinkBuilder`2"/>.</returns>
            <seealso cref="M:System.Reflection.Assembly.GetCallingAssembly"/>
        </member>
        <member name="T:L0gg3r.LogTo">
            <summary>
            Provides methods to configure log sinks.
            </summary>
            <param name="loggerBuilder">The <see cref="T:L0gg3r.LoggerBuilder"/> instance.</param>
        </member>
        <member name="M:L0gg3r.LogTo.#ctor(L0gg3r.LoggerBuilder)">
            <summary>
            Provides methods to configure log sinks.
            </summary>
            <param name="loggerBuilder">The <see cref="T:L0gg3r.LoggerBuilder"/> instance.</param>
        </member>
        <member name="M:L0gg3r.LogTo.LogSink``1(``0)">
            <summary>
            Adds the <typeparamref name="TLogSink"/> to the logger.
            </summary>
            <typeparam name="TLogSink">The <see cref="T:System.Type"/> of the log sink.</typeparam>
            <param name="logSink">The log sink instance to add.</param>
            <returns>The <see cref="T:L0gg3r.LoggerBuilder"/> instance.</returns>
        </member>
        <member name="M:L0gg3r.LogTo.LogSink``2(L0gg3r.LogSinkBuilder{``0,``1})">
            <summary>
            Adds a new logink built by the <paramref name="logSinkBuilder"/> to the logger.
            </summary>
            <typeparam name="TLogSink">The <see cref="T:System.Type"/> of the log sink.</typeparam>
            <typeparam name="TBuilder">The <see cref="T:System.Type"/> of the builder.</typeparam>
            <param name="logSinkBuilder">The log sink builder.</param>
            <returns>The <see cref="T:L0gg3r.LoggerBuilder"/>.</returns>
        </member>
        <member name="T:L0gg3r.Disposable">
            <summary>
            Represents a disposable object that executes a specified action when disposed.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:L0gg3r.Disposable"/> class with the specified action.
            </remarks>
            <param name="action">The action to execute when the object is disposed.</param>
        </member>
        <member name="M:L0gg3r.Disposable.#ctor(System.Action)">
            <summary>
            Represents a disposable object that executes a specified action when disposed.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:L0gg3r.Disposable"/> class with the specified action.
            </remarks>
            <param name="action">The action to execute when the object is disposed.</param>
        </member>
        <member name="P:L0gg3r.Disposable.IsDisposed">
            <summary>
            Gets a value indicating whether the object is disposed (true) or not (false).
            </summary>
        </member>
        <member name="M:L0gg3r.Disposable.Dispose">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Thrown when the object is already disposed.</exception>
        </member>
        <member name="T:L0gg3r.LoggerExtensions">
            <summary>
            Provides extension methods for <see cref="T:L0gg3r.Logger"/>.
            </summary>
        </member>
        <member name="M:L0gg3r.LoggerExtensions.Info(L0gg3r.Logger,System.String)">
            <summary>
            Logs an informational message.
            </summary>
            <param name="logger">The logger instance.</param>
            <param name="message">The message to log.</param>
            <returns>An instance of the <see cref="T:L0gg3r.Logger"/> class, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="logger"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="message"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:L0gg3r.LoggerExtensions.Warning(L0gg3r.Logger,System.String)">
            <summary>
            Logs a warning message.
            </summary>
            <param name="logger">The logger instance.</param>
            <param name="message">The message to log.</param>
            <returns>An instance of the <see cref="T:L0gg3r.Logger"/> class, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="logger"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="message"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:L0gg3r.LoggerExtensions.Error(L0gg3r.Logger,System.String)">
            <summary>
            Logs an error message.
            </summary>
            <param name="logger">The logger instance.</param>
            <param name="message">The message to log.</param>
            <returns>An instance of the <see cref="T:L0gg3r.Logger"/> class, allowing for method chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="logger"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="message"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:L0gg3r.TypeExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Type"/> type.
            </summary>
        </member>
        <member name="M:L0gg3r.TypeExtensions.GetLogMessageWriterInfo(System.Type)">
            <summary>
            Gets the <see cref="T:L0gg3r.LogMessageWriterInfo"/> for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="this">This <see cref="T:System.Type"/>.</param>
            <returns>The <see cref="T:L0gg3r.LogMessageWriterInfo"/> object.</returns>
            <exception cref="T:System.ArgumentException">The type does not have the <see cref="T:L0gg3r.LogMessageWriterAttribute"/> attribute.</exception>
        </member>
        <member name="T:L0gg3r.IHasLogger">
            <summary>
            Represents an object that has a <see cref="P:L0gg3r.IHasLogger.Logger"/>.
            </summary>
            <remarks>
            Types implementing this interface can have a <see cref="P:L0gg3r.IHasLogger.Logger"/> instance that
            can be get or set via the <see cref="P:L0gg3r.IHasLogger.Logger"/> property.
            </remarks>
        </member>
        <member name="P:L0gg3r.IHasLogger.Logger">
            <summary>
            Gets or sets the <see cref="P:L0gg3r.IHasLogger.Logger"/>.
            </summary>
            <seealso cref="P:L0gg3r.IHasLogger.Logger"/>
        </member>
        <member name="T:L0gg3r.Logger">
            <summary>
            The logger.
            </summary>
        </member>
        <member name="M:L0gg3r.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.Logger"/> class.
            </summary>
        </member>
        <member name="M:L0gg3r.Logger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.Logger"/> class with the specified <paramref name="name"/>.
            </summary>
            <param name="name">The name of the <see cref="T:L0gg3r.Logger"/>.</param>
        </member>
        <member name="M:L0gg3r.Logger.#ctor(System.String,L0gg3r.Logger)">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.Logger"/> class.
            </summary>
            <param name="name">The name of the <see cref="T:L0gg3r.Logger"/>.</param>
            <param name="parentLogger">The parent <see cref="T:L0gg3r.Logger"/>.</param>
        </member>
        <member name="P:L0gg3r.Logger.IsDisposed">
            <summary>
            Gets a value indicating whether the logger has been disposed.
            </summary>
        </member>
        <member name="P:L0gg3r.Logger.Name">
            <summary>
            Gets the name of the logger.
            </summary>
        </member>
        <member name="P:L0gg3r.Logger.ParentLogger">
            <summary>
            Gets the parent <see cref="T:L0gg3r.Logger"/>.
            </summary>
            <remarks>
            If the <see cref="T:L0gg3r.Logger"/> is the root logger, this property will be <see langword="null"/>.
            </remarks>
        </member>
        <member name="P:L0gg3r.Logger.LogSinks">
            <summary>
            Gets the list of attached <see cref="T:L0gg3r.ILogSink"/>s.
            </summary>
        </member>
        <member name="P:L0gg3r.Logger.Filters">
            <summary>
            Gets the list of attached filters.
            </summary>
        </member>
        <member name="P:L0gg3r.Logger.ChildLoggers">
            <summary>
            Gets the list of child <see cref="T:L0gg3r.Logger"/>s.
            </summary>
        </member>
        <member name="P:L0gg3r.Logger.MinimumLogLevel">
            <summary>
            Gets or sets the minimum <see cref="T:L0gg3r.LogLevel"/>.
            </summary>
            <remarks>
            All log messages with a <see cref="T:L0gg3r.LogLevel"/> lower than the minimum <see cref="T:L0gg3r.LogLevel"/> will be ignored.
            </remarks>
        </member>
        <member name="P:L0gg3r.Logger.TimeProvider">
            <summary>
            Gets the <see cref="P:L0gg3r.Logger.TimeProvider"/>.
            </summary>
        </member>
        <member name="M:L0gg3r.Logger.CreateLogger">
            <summary>
            Creates and returns a new <see cref="T:L0gg3r.LoggerBuilder"/>.
            </summary>
            <returns>A new <see cref="T:L0gg3r.LoggerBuilder"/>.</returns>
        </member>
        <member name="M:L0gg3r.Logger.DisposeAsync">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.Logger.Log(L0gg3r.LogLevel,System.Object)">
            <summary>
            Logs the <paramref name="message"/> with <paramref name="logLevel"/>.
            </summary>
            <param name="logLevel">The <see cref="T:L0gg3r.LogLevel"/>.</param>
            <param name="message">The message.</param>
            <returns>An instance of the <see cref="T:L0gg3r.Logger"/> class, allowing for method chaining.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.Logger.Flush">
            <summary>
            Flushes all the <see cref="T:L0gg3r.Logger"/> and all attached <see cref="T:L0gg3r.ILogSink"/>s.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.Logger.FlushAsync">
            <summary>
            Flushes all the <see cref="T:L0gg3r.Logger"/> and all attached <see cref="T:L0gg3r.ILogSink"/>s asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.Logger.GetChildLogger(System.String)">
            <summary>
            Gets a child <see cref="T:L0gg3r.Logger"/> with the specified name. If a child <see cref="T:L0gg3r.Logger"/> with the same name already exists, it is returned.
            Otherwise, a new child <see cref="T:L0gg3r.Logger"/> is created and returned.
            </summary>
            <param name="name">The name of the child <see cref="T:L0gg3r.Logger"/>.</param>
            <returns>A child <see cref="T:L0gg3r.Logger"/> with the specified name.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.Logger.AddChildLogger(L0gg3r.Logger)">
            <summary>
            Adds the <paramref name="childLogger"/> as a child of the current <see cref="T:L0gg3r.Logger"/>.
            </summary>
            <param name="childLogger">The child <see cref="T:L0gg3r.Logger"/> to add.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the <paramref name="childLogger"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:L0gg3r.Logger.AddLogSink(L0gg3r.ILogSink)">
            <summary>
            Adds an <see cref="T:L0gg3r.ILogSink"/> to the logger.
            </summary>
            <param name="logSink">The <see cref="T:L0gg3r.ILogSink"/> to be added.</param>
            <returns>An <see cref="T:System.IDisposable"/> that can be used to remove the <see cref="T:L0gg3r.ILogSink"/> from the logger.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.Logger.RemoveLogSink(L0gg3r.ILogSink)">
            <summary>
            Removes an <see cref="T:L0gg3r.ILogSink"/> from the logger.
            </summary>
            <param name="logSink">The <see cref="T:L0gg3r.ILogSink"/> to be removed.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.Logger.AddFilter(System.Predicate{L0gg3r.LogMessage})">
            <summary>
            Adds a filter to the logger.
            </summary>
            <param name="filter">The filter to be added.</param>
            <returns>An <see cref="T:System.IDisposable"/> that can be used to remove the filter from the logger.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.Logger.RemoveFilter(System.Predicate{L0gg3r.LogMessage})">
            <summary>
            Removes an filter from the logger.
            </summary>
            <param name="filter">The filter to be removed.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown when the logger has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.Logger.Log(L0gg3r.LogMessage@)">
            <summary>
            Logs the <see cref="T:L0gg3r.LogMessage"/> using the log message pipeline.
            </summary>
            <param name="logMessage">The log message to be logged.</param>
        </member>
        <member name="T:L0gg3r.DisableAsyncRequest">
            <summary>
            A request to flush the <see cref="T:L0gg3r.LogMessagePipeline" />.
            </summary>
        </member>
        <member name="M:L0gg3r.DisableAsyncRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.DisableAsyncRequest"/> struct.
            </summary>
        </member>
        <member name="P:L0gg3r.DisableAsyncRequest.TaskCompletionSource">
            <summary>
            Gets the task completion source.
            </summary>
        </member>
        <member name="T:L0gg3r.FlushAsyncRequest">
            <summary>
            A request to flush the <see cref="T:L0gg3r.LogMessagePipeline" />.
            </summary>
        </member>
        <member name="M:L0gg3r.FlushAsyncRequest.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.FlushAsyncRequest"/> struct.
            </summary>
        </member>
        <member name="P:L0gg3r.FlushAsyncRequest.TaskCompletionSource">
            <summary>
            Gets the task completion source.
            </summary>
        </member>
        <member name="T:L0gg3r.IInternalMessage">
            <summary>
            Represents an internal message.
            </summary>
            <remarks>
            An internal message is not filtered or transformed.
            </remarks>
        </member>
        <member name="T:L0gg3r.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="M:L0gg3r.LogLevel.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LogLevel"/> struct.
            </summary>
            <param name="name">The name of the <see cref="T:L0gg3r.LogLevel"/>.</param>
            <param name="description">An optional description.</param>
        </member>
        <member name="P:L0gg3r.LogLevel.Info">
            <summary>
            Gets the <see cref="P:L0gg3r.LogLevel.Info"/> log level.
            </summary>
        </member>
        <member name="P:L0gg3r.LogLevel.Warning">
            <summary>
            Gets the <see cref="P:L0gg3r.LogLevel.Warning"/> log level.
            </summary>
        </member>
        <member name="P:L0gg3r.LogLevel.Error">
            <summary>
            Gets the <see cref="P:L0gg3r.LogLevel.Error"/> log level.
            </summary>
        </member>
        <member name="P:L0gg3r.LogLevel.Order">
            <summary>
            Gets the order of the <see cref="T:L0gg3r.LogLevel"/>s.
            </summary>
            <remarks>
            The order of the <see cref="T:L0gg3r.LogLevel"/>s is a list of <see cref="T:L0gg3r.LogLevel"/>s ordered by their severity. The
            default order is <see cref="P:L0gg3r.LogLevel.Info"/>, <see cref="P:L0gg3r.LogLevel.Warning"/>, <see cref="P:L0gg3r.LogLevel.Error"/>.
            </remarks>
            <seealso cref="M:L0gg3r.LogLevel.InsertLogLevelBefore(L0gg3r.LogLevel,System.String,System.String)"/>
            <seealso cref="M:L0gg3r.LogLevel.InsertLogLevelAfter(L0gg3r.LogLevel,System.String,System.String)"/>
            <seealso cref="M:L0gg3r.LogLevel.ResetOrder"/>
        </member>
        <member name="P:L0gg3r.LogLevel.Name">
            <summary>
            Gets the name of the <see cref="T:L0gg3r.LogLevel"/>.
            </summary>
        </member>
        <member name="P:L0gg3r.LogLevel.Description">
            <summary>
            Gets the description of the <see cref="T:L0gg3r.LogLevel"/>.
            </summary>
        </member>
        <member name="M:L0gg3r.LogLevel.op_LessThan(L0gg3r.LogLevel,L0gg3r.LogLevel)">
            <summary>
            Returns <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>.
            </summary>
            <param name="left">The <see cref="T:L0gg3r.LogLevel"/> on the left side.</param>
            <param name="right">The <see cref="T:L0gg3r.LogLevel"/>on the right side.</param>
            <returns><c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>.</returns>
        </member>
        <member name="M:L0gg3r.LogLevel.op_LessThanOrEqual(L0gg3r.LogLevel,L0gg3r.LogLevel)">
            <summary>
            Returns <c>true</c> if <paramref name="left"/> is less or equal than <paramref name="right"/>.
            </summary>
            <param name="left">The <see cref="T:L0gg3r.LogLevel"/> on the left side.</param>
            <param name="right">The <see cref="T:L0gg3r.LogLevel"/>on the right side.</param>
            <returns><c>true</c> if <paramref name="left"/> is less or equal than <paramref name="right"/>.</returns>
        </member>
        <member name="M:L0gg3r.LogLevel.op_GreaterThan(L0gg3r.LogLevel,L0gg3r.LogLevel)">
            <summary>
            Returns <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>.
            </summary>
            <param name="left">The <see cref="T:L0gg3r.LogLevel"/> on the left side.</param>
            <param name="right">The <see cref="T:L0gg3r.LogLevel"/>on the right side.</param>
            <returns><c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>.</returns>
        </member>
        <member name="M:L0gg3r.LogLevel.op_GreaterThanOrEqual(L0gg3r.LogLevel,L0gg3r.LogLevel)">
            <summary>
            Returns <c>true</c> if <paramref name="left"/> is greater or equal than <paramref name="right"/>.
            </summary>
            <param name="left">The <see cref="T:L0gg3r.LogLevel"/> on the left side.</param>
            <param name="right">The <see cref="T:L0gg3r.LogLevel"/>on the right side.</param>
            <returns><c>true</c> if <paramref name="left"/> is greater or equal than <paramref name="right"/>.</returns>
        </member>
        <member name="M:L0gg3r.LogLevel.InsertLogLevelBefore(L0gg3r.LogLevel,System.String,System.String)">
            <summary>
            Inserts a new <see cref="T:L0gg3r.LogLevel"/> with <paramref name="name"/> and <paramref name="description"/> before <paramref name="logLevel"/>
            in the <see cref="P:L0gg3r.LogLevel.Order"/> of <see cref="T:L0gg3r.LogLevel"/>s.
            </summary>
            <param name="logLevel">The <see cref="T:L0gg3r.LogLevel"/> before which the new <see cref="T:L0gg3r.LogLevel"/> shall be inserted.</param>
            <param name="name">The name of the new <see cref="T:L0gg3r.LogLevel"/>.</param>
            <param name="description">The optional description of the new <see cref="T:L0gg3r.LogLevel"/>.</param>
            <returns>The newly created <see cref="T:L0gg3r.LogLevel"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a same-named <see cref="T:L0gg3r.LogLevel"/> already exists in the <see cref="P:L0gg3r.LogLevel.Order"/> of <see cref="T:L0gg3r.LogLevel"/>s or
            when the <see cref="P:L0gg3r.LogLevel.Order"/> of <see cref="T:L0gg3r.LogLevel"/> does not contain <paramref name="logLevel"/>.</exception>
        </member>
        <member name="M:L0gg3r.LogLevel.InsertLogLevelAfter(L0gg3r.LogLevel,System.String,System.String)">
            <summary>
            Inserts a new <see cref="T:L0gg3r.LogLevel"/> with <paramref name="name"/> and <paramref name="description"/> after <paramref name="logLevel"/>
            in the <see cref="P:L0gg3r.LogLevel.Order"/> of <see cref="T:L0gg3r.LogLevel"/>s.
            </summary>
            <param name="logLevel">The <see cref="T:L0gg3r.LogLevel"/> after which the new <see cref="T:L0gg3r.LogLevel"/> shall be inserted.</param>
            <param name="name">The name of the new <see cref="T:L0gg3r.LogLevel"/>.</param>
            <param name="description">The optional description of the new <see cref="T:L0gg3r.LogLevel"/>.</param>
            <returns>The newly created <see cref="T:L0gg3r.LogLevel"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when a same-named <see cref="T:L0gg3r.LogLevel"/> already exists in the <see cref="P:L0gg3r.LogLevel.Order"/> of <see cref="T:L0gg3r.LogLevel"/>s or
            when the <see cref="P:L0gg3r.LogLevel.Order"/> of <see cref="T:L0gg3r.LogLevel"/>s does not contain <paramref name="logLevel"/>.</exception>
        </member>
        <member name="M:L0gg3r.LogLevel.ResetOrder">
            <summary>
            Resets the <see cref="P:L0gg3r.LogLevel.Order"/> of <see cref="T:L0gg3r.LogLevel"/>s to the default order.
            </summary>
            <seealso cref="P:L0gg3r.LogLevel.Order"/>
        </member>
        <member name="M:L0gg3r.LogLevel.CompareTo(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogLevel.CompareTo(L0gg3r.LogLevel)">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogLevel.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogLevel.ToString">
            <inheritdoc/>
        </member>
        <member name="T:L0gg3r.LogMessage">
            <summary>
            A log message.
            </summary>
            <remarks>
            A log message delivers the information to be logged including:
            <list type="bullet">
            <item><description>The <see cref="P:L0gg3r.LogMessage.LogLevel"/>.</description></item>
            <item><description>The <see cref="T:System.DateTime"/> of the log message.</description></item>
            <item><description>The payload.</description></item>
            <item><description>The list of senders.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:L0gg3r.LogMessage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LogMessage"/> struct.
            </summary>
        </member>
        <member name="P:L0gg3r.LogMessage.Timestamp">
            <summary>
            Gets the timestamp.
            </summary>
        </member>
        <member name="P:L0gg3r.LogMessage.LogLevel">
            <summary>
            Gets the <see cref="P:L0gg3r.LogMessage.LogLevel"/>.
            </summary>
            <seealso cref="P:L0gg3r.LogMessage.LogLevel"/>
        </member>
        <member name="P:L0gg3r.LogMessage.Payload">
            <summary>
            Gets the payload.
            </summary>
        </member>
        <member name="P:L0gg3r.LogMessage.Senders">
            <summary>
            Gets the list of senders.
            </summary>
        </member>
        <member name="P:L0gg3r.LogMessage.FristSender">
            <summary>
            Gets the first sender.
            </summary>
            <remarks>
            The first sender is the <see cref="T:L0gg3r.Logger"/> that created the <see cref="T:L0gg3r.LogMessage"/>.
            </remarks>
            <seealso cref="P:L0gg3r.LogMessage.LastSender"/>
        </member>
        <member name="P:L0gg3r.LogMessage.LastSender">
            <summary>
            Gets the last sender.
            </summary>
            <remarks>
            The last sender is the <see cref="T:L0gg3r.Logger"/> that processed the <see cref="T:L0gg3r.LogMessage"/>.
            </remarks>
            <seealso cref="P:L0gg3r.LogMessage.FristSender"/>
        </member>
        <member name="M:L0gg3r.LogMessage.Equals(L0gg3r.LogMessage)">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogMessage.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:L0gg3r.LogMessagePipeline">
            <summary>
            Represents a pipeline for <see cref="T:L0gg3r.LogMessage"/>s.
            </summary>
            <remarks>
            The pipline consists of the following three steps:
            <list type="number">
            <item>
            <description>
            The <see cref="T:L0gg3r.LogMessage"/>s are filtered using the <see cref="P:L0gg3r.LogMessagePipeline.Filters"/> collection. If no filters are registered, all <see cref="T:L0gg3r.LogMessage"/>s are passed to the next step.
            </description>
            </item>
            <item>
            <description>
            The <see cref="T:L0gg3r.LogMessage"/>s are transformed using the <see cref="P:L0gg3r.LogMessagePipeline.Transform"/> <see cref="T:System.Func`2"/>. If no transform is registered, the <see cref="T:L0gg3r.LogMessage"/>s are passed to the next step unchanged.
            </description>
            </item>
            <item>
            <description>
            The <see cref="T:L0gg3r.LogMessage"/>s are passed to the target action collection.
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.#ctor(System.Action{L0gg3r.LogMessage})">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LogMessagePipeline"/> class with the
            specified synchronous target <see cref="T:System.Action`1"/>.
            </summary>
            <param name="target">The target <see cref="T:System.Action`1"/> to invoke for each <see cref="T:L0gg3r.LogMessage"/> that passes the pipeline.</param>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.#ctor(System.Func{L0gg3r.LogMessage,System.Threading.Tasks.ValueTask})">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LogMessagePipeline"/> class with the
            specified asynchronous target <see cref="T:System.Func`2"/>.
            </summary>
            <param name="target">The target <see cref="T:System.Func`2"/> to invoke for each <see cref="T:L0gg3r.LogMessage"/> that passes the pipeline.</param>
        </member>
        <member name="P:L0gg3r.LogMessagePipeline.Transform">
            <summary>
            Gets or sets a transform <see cref="T:System.Func`2"/>.
            </summary>
            <remarks>
            The transform <see cref="T:System.Func`2"/> receives a <see cref="T:L0gg3r.LogMessage"/> and returns a <see cref="T:L0gg3r.LogMessage"/>.
            The default value is a <see cref="T:System.Func`2"/> that returns the <see cref="T:L0gg3r.LogMessage"/> unchanged.
            </remarks>
        </member>
        <member name="P:L0gg3r.LogMessagePipeline.IsDisposed">
            <summary>
            Gets a value indicating whether the <see cref="T:L0gg3r.LogMessagePipeline"/> is disposed (<c>true</c>) or not (<c>false</c>).
            </summary>
        </member>
        <member name="P:L0gg3r.LogMessagePipeline.Filters">
            <summary>
            Gets the filters that are registered with the pipeline.
            </summary>
        </member>
        <member name="P:L0gg3r.LogMessagePipeline.IsDisabled">
            <summary>
            Gets a value indicating whether the <see cref="T:L0gg3r.LogMessagePipeline"/> is disabled (<c>true</c>) or not (<c>false</c>).
            </summary>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.Dispose">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="T:L0gg3r.LogMessagePipeline"/> is disposed.</exception>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.DisposeAsync">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="T:L0gg3r.LogMessagePipeline"/> is disposed.</exception>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.Submit(L0gg3r.LogMessage)">
            <summary>
            Posts a <see cref="T:L0gg3r.LogMessage"/> to the pipeline.
            </summary>
            <param name="logMessage">The <see cref="T:L0gg3r.LogMessage"/> to post.</param>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="T:L0gg3r.LogMessagePipeline"/> is disposed.</exception>
            <returns>The <see cref="T:L0gg3r.LogMessagePipeline"/> for chaining.</returns>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.AddFilter(System.Predicate{L0gg3r.LogMessage})">
            <inheritdoc/>
            <returns>A <see cref="T:System.IDisposable"/> that removes the filter from the <see cref="T:L0gg3r.LogMessagePipeline"/> on dispose.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="T:L0gg3r.LogMessagePipeline"/> is disposed.</exception>
            <example>
            The following example shows how to add a filter to the <see cref="T:L0gg3r.LogMessagePipeline"/>:
            [!code-csharp[](../../tests/Examples/src/LogMessagePipelineExamples.cs#AddFilterExample)]
            The following example shows how to remove a filter by disposing the <see cref="T:System.IDisposable"/> returned by the <see cref="M:L0gg3r.LogMessagePipeline.AddFilter(System.Predicate{L0gg3r.LogMessage})"/> method:
            [!code-csharp[](../../tests/Examples/src/LogMessagePipelineExamples.cs#DisposeFilterExample)].
            </example>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.RemoveFilter(System.Predicate{L0gg3r.LogMessage})">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="T:L0gg3r.LogMessagePipeline"/> is disposed.</exception>
            <example>
            The following example shows how to remove a filter by disposing the <see cref="T:System.IDisposable"/> returned by the <see cref="M:L0gg3r.LogMessagePipeline.AddFilter(System.Predicate{L0gg3r.LogMessage})"/> method:
            [!code-csharp[](../../tests/Examples/src/LogMessagePipelineExamples.cs#RemoveFilterExample)].
            </example>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.Add(System.Predicate{L0gg3r.LogMessage})">
            <summary>
            Adds a filter to the log message pipeline.
            </summary>
            <param name="filter">The filter to add.</param>
            <returns>An <see cref="T:System.IDisposable"/> object that can be used to remove the filter from the pipeline.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="T:L0gg3r.LogMessagePipeline"/> is disposed.</exception>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.System#Collections#Generic#IEnumerable{System#Predicate{L0gg3r#LogMessage}}#GetEnumerator">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="T:L0gg3r.LogMessagePipeline"/> is disposed.</exception>
        </member>
        <member name="M:L0gg3r.LogMessagePipeline.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Thrown when the <see cref="T:L0gg3r.LogMessagePipeline"/> is disposed.</exception>
        </member>
        <member name="T:L0gg3r.Continuation">
            <summary>
            Represents the continuation of a log message.
            </summary>
        </member>
        <member name="F:L0gg3r.Continuation.Stop">
            <summary>
            The <see cref="T:L0gg3r.LogMessage"/> shall not be passed to the next log message writer.
            </summary>
        </member>
        <member name="F:L0gg3r.Continuation.Continue">
            <summary>
            The <see cref="T:L0gg3r.LogMessage"/> shall be passed to the next log message writer if available.
            </summary>
        </member>
        <member name="T:L0gg3r.IAsyncFlushable">
            <summary>
            Represents an object that can be flushed asynchronously.
            </summary>
        </member>
        <member name="M:L0gg3r.IAsyncFlushable.FlushAsync">
            <summary>
            Flushes the object asynchronously.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that finishes after the flush operation has finished.</returns>
        </member>
        <member name="T:L0gg3r.LogMessageWriterAttribute">
            <summary>
            An attribute to mark a class as a log message writer.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:L0gg3r.LogMessageWriterAttribute"/> class.
            </remarks>
        </member>
        <member name="M:L0gg3r.LogMessageWriterAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LogMessageWriterAttribute"/> class.
            </summary>
            <param name="logSinkType">The <see cref="T:System.Type"/> of the the log sink.</param>
        </member>
        <member name="P:L0gg3r.LogMessageWriterAttribute.LogSinkType">
            <summary>
            Gets the <see cref="T:System.Type"/> of the log sink.
            </summary>
        </member>
        <member name="T:L0gg3r.LogMessageWriterAttribute`1">
            <summary>
            An attribute to mark a class as a log message writer.
            </summary>
            <remarks>
            The <typeparamref name="TLogSink"/> is the <see cref="T:System.Type"/> of the <see cref="T:L0gg3r.ILogSink"/> this
            log message writer writes to.
            </remarks>
            <typeparam name="TLogSink">The <see cref="T:System.Type"/> of the <see cref="T:L0gg3r.ILogSink"/>.</typeparam>
        </member>
        <member name="M:L0gg3r.LogMessageWriterAttribute`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LogMessageWriterAttribute`1"/> class.
            </summary>
        </member>
        <member name="T:L0gg3r.LogMessageWriterInfo">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LogMessageWriterInfo"/> class.
            </summary>
        </member>
        <member name="M:L0gg3r.LogMessageWriterInfo.#ctor(System.Type,L0gg3r.LogMessageWriterAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LogMessageWriterInfo"/> class.
            </summary>
            <param name="type">The <see cref="P:L0gg3r.LogMessageWriterInfo.Type"/> of the log message writer.</param>
            <param name="logMessageWriterAttribute">The see <see cref="T:L0gg3r.LogMessageWriterAttribute"/>.</param>
        </member>
        <member name="P:L0gg3r.LogMessageWriterInfo.Type">
            <summary>
            Gets the <see cref="P:L0gg3r.LogMessageWriterInfo.Type"/> of the log message writer.
            </summary>
        </member>
        <member name="T:L0gg3r.IHasLogMessageWriters">
            <summary>
            Represents an object that has log message writers.
            </summary>
        </member>
        <member name="P:L0gg3r.IHasLogMessageWriters.LogMessageWriters">
            <summary>
            Gets the list of writer instances.
            </summary>
            <remarks>
            If no log message writers are available, this property will return an empty list.
            </remarks>
            <seealso cref="M:L0gg3r.IHasLogMessageWriters.RegisterLogmessageWriter(System.Type)" />
        </member>
        <member name="M:L0gg3r.IHasLogMessageWriters.RegisterLogmessageWriter(System.Type)">
            <summary>
            Registers and instantiates the log message writer of type <paramref name="logMessageWriterType"/>.
            </summary>
            <param name="logMessageWriterType">The <see cref="T:System.Type"/> of the log message writer.</param>
        </member>
        <member name="T:L0gg3r.ILogMessageProvider">
            <summary>
            Provides log messages.
            </summary>
        </member>
        <member name="M:L0gg3r.ILogMessageProvider.Subscribe``1(L0gg3r.LogMessageWriterSubscriber{``0})">
            <summary>
            Subscribes the <paramref name="subscriber"/> to a payload type.
            </summary>
            <remarks>
            The subscriber will be called when a log message with a payload of type <typeparamref name="TPayload"/> is submitted.
            </remarks>
            <typeparam name="TPayload">The <see cref="T:System.Type"/> of the payload.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <returns>An <see cref="T:System.IDisposable"/> that removes the <paramref name="subscriber"/> on dispose.</returns>
            <seealso cref="M:L0gg3r.ILogMessageProvider.Unsubscribe``1(L0gg3r.LogMessageWriterSubscriber)"/>
            <see cref="T:L0gg3r.LogMessageWriterSubscriber`1"/>
        </member>
        <member name="M:L0gg3r.ILogMessageProvider.Unsubscribe``1(L0gg3r.LogMessageWriterSubscriber)">
            <summary>
            Unsubscribes the <paramref name="subscriber"/> for a payload type.
            </summary>
            <typeparam name="TPayload">The <see cref="T:System.Type"/> of the payload.</typeparam>
            <param name="subscriber">The subscriber.</param>
            <seealso cref="M:L0gg3r.ILogMessageProvider.Subscribe``1(L0gg3r.LogMessageWriterSubscriber{``0})"/>
            <seealso cref="T:L0gg3r.LogMessageWriterSubscriber"/>
        </member>
        <member name="T:L0gg3r.ILogSink">
            <summary>
            An asynchronous log sink.
            </summary>
        </member>
        <member name="M:L0gg3r.ILogSink.SubmitAsync(L0gg3r.LogMessage@)">
            <summary>
            Processes the <paramref name="logMessage"/> asynchronously.
            </summary>
            <param name="logMessage">The log message to process.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:L0gg3r.LogMessageWriterSubscriber">
            <summary>
            Represents a delegate that writes a log message.
            </summary>
            <param name="timestamp">The timestamp of the <see cref="T:L0gg3r.LogMessage"/>.</param>
            <param name="logLevel">The <see cref="T:L0gg3r.LogLevel"/> of the <see cref="T:L0gg3r.LogMessage"/>.</param>
            <param name="senders">The senders of the <see cref="T:L0gg3r.LogMessage"/>.</param>
            <param name="payload">The payload of the <see cref="T:L0gg3r.LogMessage"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that finishes after the <see cref="T:L0gg3r.LogMessage"/> has been written.</returns>
        </member>
        <member name="T:L0gg3r.LogMessageWriterSubscriber`1">
            <summary>
            Represents a delegate that writes a log message.
            </summary>
            <typeparam name="TPayload">The <see cref="T:System.Type"/> of the payload.</typeparam>
            <param name="timestamp">The timestamp of the <see cref="T:L0gg3r.LogMessage"/>.</param>
            <param name="logLevel">The <see cref="T:L0gg3r.LogLevel"/> of the <see cref="T:L0gg3r.LogMessage"/>.</param>
            <param name="senders">The senders of the <see cref="T:L0gg3r.LogMessage"/>.</param>
            <param name="payload">The payload of the <see cref="T:L0gg3r.LogMessage"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that finishes after the <see cref="T:L0gg3r.LogMessage"/> has been written.</returns>
        </member>
        <member name="T:L0gg3r.LogSinkBase`1">
            <summary>
            An abstract implementation of <see cref="T:L0gg3r.ILogSink"/>.
            </summary>
            <remarks>
            This class provides a base implementation of <see cref="T:L0gg3r.ILogSink"/> that
            processes log messages. Only the abstract <see cref="M:L0gg3r.LogSinkBase`1.WriteAsync(L0gg3r.LogMessage@)"/> method
            must be implemented to provide custom processing logic.
            </remarks>
            <seealso cref="T:L0gg3r.ILogSink"/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.#ctor(L0gg3r.Logger)">
            <summary>
            Initializes a new instance of the <see cref="T:L0gg3r.LogSinkBase`1"/> class.
            </summary>
        </member>
        <member name="P:L0gg3r.LogSinkBase`1.IsDisposed">
            <summary>
            Gets a value indicating whether the sink has been disposed (<see langword="true"/>) or not (<see langword="false"/>).
            </summary>
        </member>
        <member name="P:L0gg3r.LogSinkBase`1.IsDisabled">
            <summary>
            Gets a value indicating whether the sink is enabled (<see langword="true"/>) or not (<see langword="false"/>).
            </summary>
            <remarks>
            If the sink is disabled, it will not process log messages.
            </remarks>
        </member>
        <member name="P:L0gg3r.LogSinkBase`1.LogMessageWriters">
            <inheritdoc/>
        </member>
        <member name="P:L0gg3r.LogSinkBase`1.Logger">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.FlushAsync">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.SubmitAsync(L0gg3r.LogMessage@)">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.AddFilter(System.Predicate{L0gg3r.LogMessage})">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <see cref="T:L0gg3r.LogSinkBase`1"/> has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.RemoveFilter(System.Predicate{L0gg3r.LogMessage})">
            <inheritdoc/>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <see cref="T:L0gg3r.LogSinkBase`1"/> has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.Enable">
            <summary>
            Enables the <see cref="T:L0gg3r.LogSinkBase`1"/>.
            </summary>
            <remarks>
            This method enables the <see cref="T:L0gg3r.LogSinkBase`1"/> to process log messages.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <see cref="T:L0gg3r.LogSinkBase`1"/> has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.Disable">
            <summary>
            Disables the <see cref="T:L0gg3r.LogSinkBase`1"/>.
            </summary>
            <remarks>
            This method disables the <see cref="T:L0gg3r.LogSinkBase`1"/> from processing log messages.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the <see cref="T:L0gg3r.LogSinkBase`1"/> has been disposed.</exception>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.DisableAsync">
            <summary>
            Enables the <see cref="T:L0gg3r.LogSinkBase`1"/> asynchronously.
            </summary>
            <remarks>
            This method enables the <see cref="T:L0gg3r.LogSinkBase`1"/> to process log messages.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that finishes if the <see cref="T:L0gg3r.LogSinkBase`1"/> is disabled.</returns>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.Subscribe``1(L0gg3r.LogMessageWriterSubscriber{``0})">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.Unsubscribe``1(L0gg3r.LogMessageWriterSubscriber)">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.RegisterLogMessageWriter``1">
            <summary>
            Registers and instantiates the log message writer of type <typeparamref name="TLogMessageWriter"/>.
            </summary>
            <typeparam name="TLogMessageWriter">The <see cref="T:System.Type"/> of the log message writer.</typeparam>
            <seealso cref="M:L0gg3r.LogSinkBase`1.RegisterLogmessageWriter(System.Type)"/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.RegisterLogmessageWriter(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.RegisterLogmessageWriter(L0gg3r.LogMessageWriterInfo)">
            <summary>
            Registers and instantiates the log message writer of type <paramref name="logMessageWriterType"/>.
            </summary>
            <param name="logMessageWriterInfo">The <see cref="T:L0gg3r.LogMessageWriterInfo"/> of the log message writer.</param>
            <seealso cref="M:L0gg3r.LogSinkBase`1.RegisterLogMessageWriter``1"/>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.WriteAsync(L0gg3r.LogMessage@)">
            <summary>
            Writes the <paramref name="logMessage"/> asynchronously.
            </summary>
            <param name="logMessage">The <see cref="T:L0gg3r.LogMessage"/> to write.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that finishes if writing is done.</returns>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.ProcessAsync(L0gg3r.LogMessage)">
            <summary>
            Processes the <paramref name="logMessage"/> asynchronously.
            </summary>
            <remarks>
            Child classes must override this method to provide custom processing logic.
            </remarks>
            <param name="logMessage">The <see cref="T:L0gg3r.LogMessage"/> to process.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> that finishes when the <paramref name="logMessage"/> was processed.</returns>
        </member>
        <member name="M:L0gg3r.LogSinkBase`1.DisposeAsyncCore">
            <summary>
            Disposes of the resources used by the <see cref="T:L0gg3r.LogSinkBase`1"/>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that finishes if disposing has finished.</returns>
        </member>
    </members>
</doc>
